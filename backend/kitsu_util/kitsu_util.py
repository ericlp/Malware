import requests


def get_user_id_by_name(name):
    c = requests.get("https://kitsu.io/api/edge/users?filter[name]=" + name)
    try:
        # establish connection

        if c.status_code == 200:
            return c.json()['data'][0]['id']
    finally:
        c.close()


# returns a list of links to all library entries
ENTRIES_PER_PAGE = 500  # 500 is max


def get_user_library_entries(id):
    c = requests.get(
        "https://kitsu.io/api/edge/users/" + id + "/library-entries?page%5Blimit%5D=500&page%5Boffset%5D=0")
    try:
        if c.status_code != 200:
            return Exception(c.status_code)
        data = c.json()
        count = data['meta']['count']
        entries = []
        for it in range(0, count, ENTRIES_PER_PAGE):
            if it != 0:  # already opened connection for first iteration
                c.close()
                offset = str(it * ENTRIES_PER_PAGE)
                url = "https://kitsu.io/api/edge/users/" + id + "/library-entries?page\%5Blimit%5D=500&page\%5Boffset%5D=" + offset
                c = requests.get()
            for data in c.json()['data']:
                entries.append(data['links']['self'])

        return entries

    finally:
        c.close()


def get_anime_by_entry(data):
    anime_url = data['relationships']['anime']['links']['related']
    return get_anime_by_url(anime_url)

def get_anime_by_url(url):
    anime = requests.get(url)
    try:
        if anime.status_code == 200:
            return anime.json()
    finally:
        anime.close()

def get_title_by_anime(anime):
    try:
        return anime['data']['attributes']['titles']['en']
    except KeyError:
        return anime['data']['attributes']['titles']['en_us']

def get_id_by_anime(anime):
    return anime['data']['id']

def get_pic_url_by_anime(anime):
    return anime['data']['attributes']['coverImage']['original']

def get_episode_count_by_anime(anime):
    return anime['data']['attributes']['episodeCount']

def get_status_by_entry(data):
    return data['attributes']['status']

def get_progress_by_entry(data):
    return data['attributes']['progress']

def get_ranking_dictionary_by_user(name):
    id = get_user_id_by_name(name)
    get_ranking_dictionary_by_id(id)

def get_ranking_dictionary_by_id(id):
    library = get_user_library_entries(id)
    rankings = {}

    for entry in library.keys():
        status = get_status_by_entry(entry)
        progress = get_progress_by_entry(entry)
        anime = get_anime_by_entry(entry)
        title = get_title_by_anime(anime)
        episode_count = get_episode_count_by_anime(anime)

        if status == 'completed':
            change = -1
        elif progress != 0:
            change = 2 * (0.5 - progress / episode_count)
        else:
            change = 1

        if not rankings.keys().__contains__(title):
            rankings[title] = 0

        rankings[title] += change

    return rankings

def merge_ranking_dictionaries(*ranking_dictionaries):
    final_rankings = {}
    # iterate over each ranking dictionary
    for r in ranking_dictionaries:
        # iterate over each key
        for key in r.keys():
            # enter keys and increment by corresponding values
            if not final_rankings.keys().__contains__(key):
                final_rankings[key] = 0
            final_rankings[key] += r[key]
    return final_rankings

def get_anime_dictionary_by_url(url):
    return get_anime_dictionary_by_anime(get_anime_by_url(url))

def get_anime_dictionary_by_anime(anime):
    name = get_title_by_anime(anime)
    episode_count = get_episode_count_by_anime(anime)
    id = get_id_by_anime(anime)
    pic_url = get_pic_url_by_anime(anime)

    anime = {}
    anime['name'] = name
    anime['episodeCount'] = episode_count
    anime['id'] = id
    anime['pictureURL'] = pic_url

    return anime

def get_user_dictionary_by_name_and_anime(name, anime):
    id = get_user_id_by_name(name)
    episode_count = get_episode_count_by_anime(anime)

    user = {}

    user['id'] = id
    user['episodeCount'] = episode_count
    user['leader'] = False

    return user

